/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.userInterface;

import java.util.Vector;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import org.backend.controllers.user.StockTransaction;
import org.backend.models.Customer;
import org.backend.models.Manager;
import org.backend.models.User;

/**
 *
 * @author praneshjayasundar
 */
public class ViewClosedPostions extends javax.swing.JDialog {

    static User loggedInUserGlobal;
    double realisedProfitValue = 0;
    double unrealisedProfitValue = 0;
    /**
     * Creates new form StockDetails
     */
    public ViewClosedPostions(javax.swing.JDialog parent, boolean modal, User loggedInUser) {
        super(parent, modal);
        loggedInUserGlobal = loggedInUser;
        initComponents();
        setLocationRelativeTo(null);
        addStockData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        content = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OpenPositions = new javax.swing.JTable();
        formTitle = new javax.swing.JLabel();
        unrealisedProfit = new JLabel();
        realisedProfit = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        OpenPositions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction ID", "Stock ID", "Account Number", "Quantity", "Status", "Buy Amount", "Sell Amount", "Transaction Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OpenPositions.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(OpenPositions);

        formTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        formTitle.setText("Closed Positions");

        Manager manager = new Manager();
        Customer customer = new Customer();
        for(Customer cust: manager.getCustomers()){
            if(cust.getId() == loggedInUserGlobal.getId()){
                customer = cust;
                System.out.println("Test ID"+customer.getId());
                break;
            }
        }

        realisedProfitValue = customer.calculateRealisedProfit();
        realisedProfit.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        realisedProfit.setText("Realised Profit: " + realisedProfitValue);

        unrealisedProfitValue = customer.calculateRealisedProfit();
        unrealisedProfit.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        unrealisedProfit.setText("Unrealised Profit: " + unrealisedProfitValue);

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formTitle)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(realisedProfit)
                    .addComponent(unrealisedProfit)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(formTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(realisedProfit)
                    .addGap(18,18,18)
                    .addComponent(unrealisedProfit)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewClosedPostions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewClosedPostions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewClosedPostions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewClosedPostions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewClosedPostions dialog = new ViewClosedPostions(new javax.swing.JDialog(), true, loggedInUserGlobal);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTable OpenPositions;
    private javax.swing.JPanel content;
    private javax.swing.JLabel formTitle;
    private javax.swing.JLabel realisedProfit;
    private javax.swing.JLabel unrealisedProfit;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration
    
    public void addStockData(){
        if (loggedInUserGlobal != null) {
            //boolean updateStocksSuccess = false;
            System.out.println("Enter Stock Details");
            System.out.print("Stock Id: ");
            
            
            String[] columns = new String [] {
                "Transaction ID", "Stock ID", "Account Number", "Quantity", "Status", "Buy Amount", "Sell Amount", "Transaction Date"
            };

            DefaultTableModel model = (DefaultTableModel)OpenPositions.getModel();
            model.setColumnIdentifiers(columns);
            
            //find stock in manager stocks

            Manager manager = new Manager();
            manager.loadAllData();
            Customer customer = new Customer();
            for(Customer cust: manager.getCustomers()){
                if(cust.getId() == loggedInUserGlobal.getId()){
                    customer = cust;
                    break;
                }
            }
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            for(int i=0; i<customer.getClosedPositions().size(); i++){
                Vector<Object> vector = new Vector<>();
                vector.add(customer.getClosedPositions().get(i).getStockTransactionId());
                vector.add(customer.getClosedPositions().get(i).getStockId());
                vector.add(customer.getClosedPositions().get(i).getAccountNumber());
                vector.add(customer.getClosedPositions().get(i).getQuantity());
                vector.add(customer.getClosedPositions().get(i).getStatus());
                vector.add(customer.getClosedPositions().get(i).getBuyPrice());
                vector.add(customer.getClosedPositions().get(i).getSellPrice());
                vector.add(0);
                vector.add(customer.getClosedPositions().get(i).getTransactionDate());

                model.addRow(vector);
            }
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());

        } else {
            System.out.println("Please login first");
        }
    }
}