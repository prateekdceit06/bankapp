/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.userInterface;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.backend.models.AccountChecking;
import org.backend.models.AccountSavings;
import org.backend.models.Manager;
import org.backend.models.User;

/**
 * A GUI to list all transactions of a user
 */
public class BankerTransactionDetails extends javax.swing.JDialog {

    static User loggedInUserGlobal;
    /**
     * Creates new form TransactionDetails
     */
    public BankerTransactionDetails(javax.swing.JDialog parent, boolean modal, User loggedInUser) {
        super(parent, modal);
        loggedInUserGlobal = loggedInUser;
        initComponents();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        durationGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        formTitle = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        transactionDetails = new javax.swing.JTable();
        searchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        last24Hours = new javax.swing.JRadioButton();
        last1Week = new javax.swing.JRadioButton();
        last1Month = new javax.swing.JRadioButton();
        last1Year = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        formTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        formTitle.setText("Transaction Details");

        transactionDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction ID", "Transaction Status", "Account Number", "Initiating Customer ID", "Receiving Customer ID", "Transaction Type", "Amount", "Active"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transactionDetails.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(transactionDetails);
        transactionDetails.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Duration");

        durationGroup.add(last24Hours);
        last24Hours.setText("Last 24 hours");

        durationGroup.add(last1Week);
        last1Week.setText("Last week");

        durationGroup.add(last1Month);
        last1Month.setText("Last month");

        durationGroup.add(last1Year);
        last1Year.setText("Last year");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel2.setText("Transaction History");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1001, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formTitle)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38)
                        .addComponent(last24Hours)
                        .addGap(18, 18, 18)
                        .addComponent(last1Week)
                        .addGap(18, 18, 18)
                        .addComponent(last1Month)
                        .addGap(18, 18, 18)
                        .addComponent(last1Year)
                        .addGap(57, 57, 57)
                        .addComponent(searchButton)))
                .addGap(34, 34, 34))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(374, 374, 374)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(last24Hours)
                    .addComponent(last1Week)
                    .addComponent(last1Month)
                    .addComponent(last1Year)
                    .addComponent(searchButton)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(formTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {  
        if(!last1Year.isSelected() && !last1Month.isSelected() && !last1Week.isSelected() && !last24Hours.isSelected()){
            JOptionPane.showMessageDialog(null, "Please select the duration");
            return;
        }
        else{
            addTransactionData();
        }
        
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BankerTransactionDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BankerTransactionDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BankerTransactionDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BankerTransactionDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BankerTransactionDetails dialog = new BankerTransactionDetails(new javax.swing.JDialog(), true, loggedInUserGlobal);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup durationGroup;
    private javax.swing.JLabel formTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton last24Hours;
    private javax.swing.JRadioButton last1Week;
    private javax.swing.JRadioButton last1Month;
    private javax.swing.JRadioButton last1Year;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton searchButton;
    private javax.swing.JTable transactionDetails;
    // End of variables declaration
    
    public void addTransactionData(){

        String[] columns = new String [] {
            "Transaction ID", "Account Number", "Initiating Customer ID", "Transaction Type", "Debit Amount", "Credit Amount", "Transaction Status"
        };

        Manager manager = new Manager();
        
        DefaultTableModel modelTransaction = (DefaultTableModel)transactionDetails.getModel();
        modelTransaction.setColumnIdentifiers(columns);
        modelTransaction.setRowCount(0);

        int duration = 0;
        
        if(last24Hours.isSelected()){
            System.out.println("Duration: 24 hours");
            duration = 1;

        }
        else if(last1Week.isSelected()){
            System.out.println("Duration: 1 week");
            duration = 7;
        }
        else if(last1Month.isSelected()){
            System.out.println("Duration: 1 month");
            duration = 30;
        }
        else if(last1Year.isSelected()){
            System.out.println("Duration: year");
            duration = 365;
        }
        else if(last1Year.isSelected() && last1Month.isSelected() && last1Week.isSelected() && last24Hours.isSelected()){
            JOptionPane.showMessageDialog(null, "Please select the duration");
            return;
        }

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");  
        LocalDateTime searchDate = LocalDateTime.now().minusDays(duration);  
        System.out.println("Search date"+dtf.format(searchDate));
        

        //-----------------View Transaction Detail-----------------------//

        if (loggedInUserGlobal != null) {
            System.out.println("Enter Account Details");
            System.out.print("Account Number: ");
            //find account in manager accounts
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            if (manager.getAccounts() != null && manager.getAccounts().size() > 0) {

                for (AccountSavings accountSavings : manager.getSavingsAccounts()) {
                    if ((loggedInUserGlobal.getIsAdmin()==1)) {
                        //view account transactions
                        System.out.println("Account Transactions: ");
                        if(accountSavings.getTransactions() != null 
                            &&
                            accountSavings.getTransactions().size() > 0
                        ) {
                            //accountSavings.viewTransactions();

                            for(int i=0; i<accountSavings.getTransactions().size(); i++){

                                Vector<Object> vector = new Vector<>();
                                if(accountSavings.getTransactions().get(i).getTransactionDate().isAfter(searchDate)){
                                    vector.add(accountSavings.getTransactions().get(i).getTransactionId());
                                    vector.add(accountSavings.getTransactions().get(i).getAccountNumber());
                                    vector.add(accountSavings.getTransactions().get(i).getCustomerId());
                                    vector.add(accountSavings.getTransactions().get(i).getTransactionType());
                                    vector.add(accountSavings.getTransactions().get(i).getDebitAmount());
                                    vector.add(accountSavings.getTransactions().get(i).getCreditAmount());
                                    vector.add(accountSavings.getTransactions().get(i).getTransactionStatus());

                                    modelTransaction.addRow(vector);
                                }
                                
                            }

                        } else {
                            System.out.println("No Transactions Found");
                        }

                    }
                }
                for (AccountChecking checkingAccount : manager.getCheckingAccounts()) {
                    if ((loggedInUserGlobal.getIsAdmin()==1)) {
                        //view account transactions
                        System.out.println("Account Transactions: ");
                        if(checkingAccount.getTransactions()!=null &&
                                checkingAccount.getTransactions().size()>0) {
                            //checkingAccount.viewTransactions();

                            for(int i=0; i<checkingAccount.getTransactions().size(); i++){

                                Vector<Object> vector = new Vector<>();
                                vector.add(checkingAccount.getTransactions().get(i).getTransactionId());
                                vector.add(checkingAccount.getTransactions().get(i).getAccountNumber());
                                vector.add(checkingAccount.getTransactions().get(i).getCustomerId());
                                vector.add(checkingAccount.getTransactions().get(i).getTransactionType());
                                vector.add(checkingAccount.getTransactions().get(i).getDebitAmount());
                                vector.add(checkingAccount.getTransactions().get(i).getCreditAmount());
                                vector.add(checkingAccount.getTransactions().get(i).getTransactionStatus());

                                modelTransaction.addRow(vector);
                            }

                        } else{
                            System.out.println("No Transactions Found");
                        }
                    }
                }

            } else {
                System.out.println("No Such Account Found");
            }
        } else {
            System.out.println("Please login first");
        }
        //-----------------View Transaction Detail-----------------------//

    }

}
