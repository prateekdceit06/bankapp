/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.userInterface;

import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.backend.models.AccountLoan;
import org.backend.models.Loan;
import org.backend.models.Manager;
import org.backend.models.User;
import org.backend.staticdata.Data;

/**
 *
 * @author praneshjayasundar
 */
public class LoanApplicationApproval extends javax.swing.JDialog {

    static User loggedInUserGlobal;
    /**
     * Creates new form TransferFunds
     */
    public LoanApplicationApproval(javax.swing.JDialog parent, boolean modal, User loggedInUser) {
        super(parent, modal);
        loggedInUserGlobal = loggedInUser;
        initComponents();
        setLocationRelativeTo(null);
        addData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        currencyGroup = new javax.swing.ButtonGroup();
        content = new javax.swing.JPanel();
        formTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loanTable = new javax.swing.JTable();
        approveLoan = new javax.swing.JButton();
        rejectLoan = new javax.swing.JButton();
        sanctionAmount = new javax.swing.JLabel();
        interestRate = new javax.swing.JLabel();
        loanDuration = new javax.swing.JLabel();
        sanctionAmountValue = new javax.swing.JTextField();
        interestRateValue = new javax.swing.JTextField();
        durationValue = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        usd = new javax.swing.JRadioButton();
        euro = new javax.swing.JRadioButton();
        inr = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        formTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        formTitle.setText("Loan Application Approval");

        loanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loan ID", "Customer ID", "Loan Status", "Loan Amount Requested", "Collateral Value", "Loan Application Date", "Loan Decision Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(loanTable);

        approveLoan.setText("Approve");
        approveLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveLoanActionPerformed(evt);
            }
        });

        rejectLoan.setText("Reject");
        rejectLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectLoanActionPerformed(evt);
            }
        });

        sanctionAmount.setText("Sanction Amount");

        interestRate.setText("Interest Rate");

        loanDuration.setText("Loan Duration Months");

        sanctionAmountValue.setColumns(15);
        sanctionAmountValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sanctionAmountValueActionPerformed(evt);
            }
        });

        interestRateValue.setColumns(15);

        durationValue.setColumns(15);

        jLabel1.setText("Currency");

        currencyGroup.add(usd);
        usd.setText("USD");

        currencyGroup.add(euro);
        euro.setText("Euro");

        currencyGroup.add(inr);
        inr.setText("INR");

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(303, 303, 303)
                        .addComponent(formTitle))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(approveLoan)
                        .addGap(70, 70, 70)
                        .addComponent(rejectLoan))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sanctionAmount)
                                    .addComponent(interestRate)
                                    .addComponent(loanDuration)
                                    .addComponent(jLabel1))
                                .addGap(59, 59, 59)
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(contentLayout.createSequentialGroup()
                                        .addComponent(usd)
                                        .addGap(18, 18, 18)
                                        .addComponent(euro)
                                        .addGap(18, 18, 18)
                                        .addComponent(inr))
                                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(sanctionAmountValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(interestRateValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(durationValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(formTitle)
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loanDuration)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sanctionAmountValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sanctionAmount))
                        .addGap(18, 18, 18)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(interestRateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(interestRate))
                        .addGap(18, 18, 18)
                        .addComponent(durationValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(usd)
                        .addComponent(euro)
                        .addComponent(inr)))
                .addGap(27, 27, 27)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(approveLoan)
                    .addComponent(rejectLoan))
                .addGap(49, 49, 49))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void approveLoanActionPerformed(java.awt.event.ActionEvent evt) {  
        String currencyUnit = "";                                        
        System.out.println("Action approve");                                         
        if (loggedInUserGlobal != null) {
            if (loggedInUserGlobal.getId() == 1) {
                System.out.println("Enter Loan Details");
                System.out.print("Loan Id: ");

                DefaultTableModel loanModel = (DefaultTableModel)loanTable.getModel();
                int selectedAccount1 = loanTable.getSelectedRow();
                int loanId = Integer.parseInt(loanModel.getValueAt(selectedAccount1, 0).toString());
                
                //int loanId = Integer.parseInt(br.readLine());
                System.out.print(Data.LoanStatus.APPROVED + "/" + Data.LoanStatus.REJECTED);
                //find loan in manager loans
                System.out.println("Pranesh here");

                if(usd.isSelected()){
                    System.out.println("Currency: USD");
                    currencyUnit = usd.getText().toString();
                }
                else if(euro.isSelected()){
                    System.out.println("Currency: EUR");
                    currencyUnit = euro.getText().toString();
                }
                else if(inr.isSelected()){
                    System.out.println("Currency: INR");
                    currencyUnit = inr.getText().toString();
                }
                else{
                    System.out.println("Currency: Null");
                    JOptionPane.showMessageDialog(null, "Please select a currency");
                    return;
                }

                Manager manager = new Manager();
                manager.loadAllData();
                loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
                if (manager.getLoans() != null && manager.getLoans().size() > 0) {
                    for (Loan loan : manager.getLoans()) {
                        if (loan.getLoanId() == loanId) {
                            //approve reject loan
                            if (loan.getLoanStatus().equals(Data.LoanStatus.PENDING.toString())) {
                                    AccountLoan loanAccount = new AccountLoan(loan.getCustomerId(),
                                            Data.AccountTypes.LOAN.toString(), 0, 1);
                                    //find user in manager users with id = loan.getCustomerId()
                                User customer = null;
                                for (User user : manager.getUsers()) {
                                    if (user.getId() == loan.getCustomerId()) {
                                        customer = user;
                                        break;
                                    }
                                }
                                loanAccount.createAccount(loggedInUserGlobal, manager.getAccountNumbers(), currencyUnit);
                                // double sanctionAmount = 10000;
                                // double interestRate = 10;
                                // int loanDurationInMonths = 12;
                                double sanctionAmount = Double.parseDouble(sanctionAmountValue.getText().toString());
                                double interestRate = Double.parseDouble(interestRateValue.getText().toString());
                                int loanDurationInMonths = Integer.parseInt(durationValue.getText().toString());

                                boolean loanApproved = loan.approveLoan(loan.getLoanId(), customer.getId(),
                                        loanAccount.getAccountNumber(),
                                        sanctionAmount, Data.LoanStatus.APPROVED.toString(),
                                        interestRate, Data.LoanInterestUnit.MONTHLY.toString(), loanDurationInMonths, loggedInUserGlobal);
                                if (loanApproved) {
                                    System.out.println("Loan Approved");
                                    JOptionPane.showMessageDialog(null, "Loan Approved");
                                    loanAccount.transfer(sanctionAmount, manager.getBankAccountNumber(),
                                            loanAccount.getAccountNumber(), loggedInUserGlobal);
                                } else {
                                    System.out.println("Something went wrong. Loan Approval Failed.");
                                    JOptionPane.showMessageDialog(null, "Something went wrong. Loan Approval Failed.");
                                    }
                            }

                        }
                    }
                    manager.loadAllData();
                    loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
                } else {
                    System.out.println("No Such Loan Found");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Access denied! Insufficient privileges");
            }
        }
    }                                           

    private void rejectLoanActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.out.println("Action approve");                                         
        if (loggedInUserGlobal != null) {
            if (loggedInUserGlobal.getId() == 1) {
                System.out.println("Enter Loan Details");
                System.out.print("Loan Id: ");

                DefaultTableModel loanModel = (DefaultTableModel)loanTable.getModel();
                int selectedAccount1 = loanTable.getSelectedRow();
                int loanId = Integer.parseInt(loanModel.getValueAt(selectedAccount1, 0).toString());
                
                //int loanId = Integer.parseInt(br.readLine());
                System.out.print(Data.LoanStatus.APPROVED + "/" + Data.LoanStatus.REJECTED);
                //find loan in manager loans
                System.out.println("Pranesh here");

                Manager manager = new Manager();
                manager.loadAllData();
                loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
                if (manager.getLoans() != null && manager.getLoans().size() > 0) {
                    for (Loan loan : manager.getLoans()) {
                        if (loan.getLoanId() == loanId) {
                            //approve reject loan
                            if (loan.getLoanStatus().equals(Data.LoanStatus.PENDING.toString())) {
                                    boolean loanRejected = loan.rejectLoan(loan.getLoanId(), Data.LoanStatus.REJECTED.toString(), loggedInUserGlobal);
                                if (loanRejected) {
                                    System.out.println("Loan Rejected");
                                    JOptionPane.showMessageDialog(null, "Loan Rejected");
                                } else {
                                    System.out.println("Something went wrong. Loan Rejection Failed.");
                                    JOptionPane.showMessageDialog(null, "Something went wrong. Loan Rejection Failed.");
                                }
                            }

                        }
                    }
                    manager.loadAllData();
                    loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
                } else {
                    System.out.println("No Such Loan Found");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Access denied! Insufficient privileges");
            }
        }
    }                                          

    private void sanctionAmountValueActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoanApplicationApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoanApplicationApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoanApplicationApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoanApplicationApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoanApplicationApproval dialog = new LoanApplicationApproval(new javax.swing.JDialog(), true, loggedInUserGlobal);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton approveLoan;
    private javax.swing.JPanel content;
    private javax.swing.ButtonGroup currencyGroup;
    private javax.swing.JTextField durationValue;
    private javax.swing.JRadioButton euro;
    private javax.swing.JLabel formTitle;
    private javax.swing.JRadioButton inr;
    private javax.swing.JLabel interestRate;
    private javax.swing.JTextField interestRateValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel loanDuration;
    private javax.swing.JTable loanTable;
    private javax.swing.JButton rejectLoan;
    private javax.swing.JLabel sanctionAmount;
    private javax.swing.JTextField sanctionAmountValue;
    private javax.swing.JRadioButton usd;
    // End of variables declaration
    
    public void addData(){

        String[] columns = new String [] {
            "Loan ID", "Customer ID", "Loan Status", "Loan Amount Requested", "Collateral Value", "Loan Decision Date"
        };

        DefaultTableModel model = (DefaultTableModel)loanTable.getModel();
        model.setColumnIdentifiers(columns);

        if (loggedInUserGlobal != null) {

            //find loan in manager loans
            Manager manager = new Manager();
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            if (manager.getLoans() != null && manager.getLoans().size() > 0) {
                for (Loan loan : manager.getLoans()) {
                    //if (loan.getCustomerId() == loggedInUserGlobal.getId()) {
                        //approve reject loan

                        if(loan.getLoanStatus().equals(Data.LoanStatus.PENDING.toString())){

                            System.out.println("Hello: "+loggedInUserGlobal.getId());
                            Vector<Object> vector = new Vector<>();
                            vector.add(loan.getLoanId());
                            vector.add(loan.getCustomerId());
                            vector.add(loan.getLoanStatus());
                            vector.add(loan.getLoanAmount());
                            vector.add(loan.getCollateralValue());
                            vector.add(loan.getLoanDecisionDate());

                            model.addRow(vector);
                        }
                        
                    //}
                }
                //manager.loadAllData();
                //loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            } else {
                System.out.println("No Such Loan Found");
            }
        }

    }




}
