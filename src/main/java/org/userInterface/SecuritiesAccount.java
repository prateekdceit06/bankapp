/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.userInterface;

import java.util.List;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.backend.controllers.account.Transfer;
import org.backend.models.Account;
import org.backend.models.AccountNewSecurity;
import org.backend.models.AccountSavings;
import org.backend.models.Manager;
import org.backend.models.User;
import org.backend.staticdata.Data;

/**
 *
 * @author praneshjayasundar
 */
public class SecuritiesAccount extends javax.swing.JDialog {

    static User loggedInUserGlobal;
    /**
     * Creates new form SavingsAccount
     */
    public SecuritiesAccount(javax.swing.JDialog parent, boolean modal, User loggedInUser) {
        super(parent, modal);
        loggedInUserGlobal = loggedInUser;
        initComponents();
        setLocationRelativeTo(null);
        addSenderData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        currencyGroup = new javax.swing.ButtonGroup();
        content = new javax.swing.JPanel();
        formTitle = new javax.swing.JLabel();
        customerId = new javax.swing.JLabel();
        accountBalance = new javax.swing.JLabel();
        successMsg = new javax.swing.JLabel();
        customerIdValue = new javax.swing.JTextField();
        accountBalanceValue = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        usd = new javax.swing.JRadioButton();
        euro = new javax.swing.JRadioButton();
        inr = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        formTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        formTitle.setText("Create Securities Account");

        customerId.setText("Customer ID");

        accountBalance.setText("Account Balance");

        customerIdValue.setColumns(15);
        customerIdValue.setToolTipText("ID");
        customerIdValue.setText(String.valueOf(loggedInUserGlobal.getId()));
        customerIdValue.setEditable(false);

        customerIdValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerIdValueActionPerformed(evt);
            }
        });

        accountBalanceValue.setColumns(15);
        accountBalanceValue.setToolTipText("Enter the account balance");

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Currency");

        currencyGroup.add(usd);
        usd.setText("USD");

        currencyGroup.add(euro);
        euro.setText("EUR");

        currencyGroup.add(inr);
        inr.setText("INR");

        jLabel2.setText("Account");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Account Number", "Account Type", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerId)
                    .addComponent(accountBalance)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(successMsg))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(contentLayout.createSequentialGroup()
                                        .addComponent(usd)
                                        .addGap(18, 18, 18)
                                        .addComponent(euro)
                                        .addGap(18, 18, 18)
                                        .addComponent(inr))
                                    .addComponent(createButton))
                                .addComponent(accountBalanceValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(customerIdValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(148, Short.MAX_VALUE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(442, 442, 442)
                .addComponent(formTitle)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(formTitle)
                .addGap(64, 64, 64)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerId)
                    .addComponent(customerIdValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jLabel2)
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(successMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountBalance)
                    .addComponent(accountBalanceValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usd)
                    .addComponent(euro)
                    .addComponent(inr))
                .addGap(61, 61, 61)
                .addComponent(createButton)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if (loggedInUserGlobal != null) {
            boolean createNewSecurityAccountSuccess = false;
            System.out.println("Enter Account Details");
            System.out.print("Account Number: ");
            //find account in manager accounts

            if(jTable3.getSelectionModel().isSelectionEmpty()){
                System.out.println("Please select an account");
                JOptionPane.showMessageDialog(null, "Please select an account");
                return;
            }

            DefaultTableModel senderModel = (DefaultTableModel)jTable3.getModel();
            int selectedAccount1 = jTable3.getSelectedRow();
            String accountNumber = senderModel.getValueAt(selectedAccount1, 1).toString();

            System.out.println("Account Number: "+accountNumber);
            if(!isDouble(accountBalanceValue.getText().toString())){
                JOptionPane.showMessageDialog(null, "Please enter a valid amount");
                return;
            }

            String currencyUnit = "";

            double initialBalance = Double.parseDouble(accountBalanceValue.getText().toString());

            if(usd.isSelected()){
                System.out.println("Currency: USD");
                currencyUnit = usd.getText().toString();
            }
            else if(euro.isSelected()){
                System.out.println("Currency: EUR");
                currencyUnit = euro.getText().toString();
            }
            else if(inr.isSelected()){
                System.out.println("Currency: INR");
                currencyUnit = inr.getText().toString();
            }
            else{
                System.out.println("Currency: Null");
                JOptionPane.showMessageDialog(null, "Please select a currency");
                return;
            }

            Manager manager = new Manager();
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            Account moneyTransferAccount = new AccountSavings();
            int totalSavingAccountBalance = 0;
            for (Account account : manager.getAccounts()) {
                if (loggedInUserGlobal.getId() == account.getCustomerId() &&
                        account.getAccountStatus() == 1) {
                    //create new securities account
                    if (account instanceof AccountSavings) {
                        totalSavingAccountBalance += account.getAccountBalance();
                    }
                }
            }
            if (totalSavingAccountBalance > (Data.minimumSavingsBalanceForNewSecurityAccount +
                    initialBalance)) {
                for (Account account : manager.getAccounts()) {
                    if (loggedInUserGlobal.getId() == account.getCustomerId() &&
                            account.getAccountNumber().equals(accountNumber)) {
                        //create new securities account
                        if (account instanceof AccountSavings && initialBalance >=
                                Data.minimumTransferBalanceForNewSecurities && initialBalance <=
                                account.getAccountBalance()) {
                            moneyTransferAccount = account;
                            Account newSecurityAccount = new AccountNewSecurity(loggedInUserGlobal.getId(),
                                    Data.AccountTypes.NEW_SECURITY.toString(), 0, 1);
                            List<String> accountNumbers = manager.getAccountNumbers();
                            createNewSecurityAccountSuccess = newSecurityAccount.createAccount(loggedInUserGlobal,
                                    accountNumbers, currencyUnit);
                            if (createNewSecurityAccountSuccess) {
                                boolean success = ((AccountSavings) moneyTransferAccount).transfer(initialBalance,
                                        moneyTransferAccount.getAccountNumber(),
                                        newSecurityAccount.getAccountNumber(), loggedInUserGlobal);
                                if (success) {
                                    Transfer transfer = new Transfer();
                                    transfer.transfer(Data.savingsAccountCreationFees,
                                            0,
                                            newSecurityAccount.getAccountNumber(), Data.TransactionTypes.ACCOUNT_CREATION_FEE.toString(),
                                            manager.getBankAccountNumber(), loggedInUserGlobal);
                                    System.out.println("New Securities Account Created");
                                    JOptionPane.showMessageDialog(null, "New Securities Account Created");
                                } else {
                                    System.out.println("Something went wrong. New Securities Account Creation Failed.");
                                    JOptionPane.showMessageDialog(null, "Something went wrong. New Securities Account Creation Failed.");
                                }
                                break;
                            }
                        }
                        else {
                            System.out.println("Something went wrong. New Securities Account Creation Failed.");
                            JOptionPane.showMessageDialog(null, "Minimum savings balance: "+5000+", Minimum securities balance: "+Data.minimumTransferBalanceForNewSecurities);
                        }
                    }
                }
            }
            else {
                System.out.println("Low Balance");
                JOptionPane.showMessageDialog(null, "Minimum savings balance: "+5000+", Minimum securities balance: "+Data.minimumTransferBalanceForNewSecurities);
            }
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());

        } else {
            System.out.println("Please login first");
        }
    }                                            

    private void customerIdValueActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecuritiesAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecuritiesAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecuritiesAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecuritiesAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SecuritiesAccount dialog = new SecuritiesAccount(new javax.swing.JDialog(), true, loggedInUserGlobal);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel accountBalance;
    private javax.swing.JTextField accountBalanceValue;
    private javax.swing.JPanel content;
    private javax.swing.JButton createButton;
    private javax.swing.ButtonGroup currencyGroup;
    private javax.swing.JLabel customerId;
    private javax.swing.JTextField customerIdValue;
    private javax.swing.JRadioButton euro;
    private javax.swing.JLabel formTitle;
    private javax.swing.JRadioButton inr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel successMsg;
    private javax.swing.JRadioButton usd;
    // End of variables declaration
    
    public void addSenderData(){

        //add senders account data
        if (loggedInUserGlobal != null) {

            String[] columns = new String [] {
                "Customer ID", "Account Number", "Account Type", "Balance"
            };

            DefaultTableModel model = (DefaultTableModel)jTable3.getModel();
            model.setColumnIdentifiers(columns);

            Manager manager = new Manager();
            System.out.println("Enter Account Details");
            System.out.print("Account Number: ");
            //find account in manager accounts
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            if (manager.getAccounts() != null) {
                for (Account account : manager.getAccounts()) {
                    if ((account.getCustomerId() == loggedInUserGlobal.getId()) 
                        &&
                        account.getAccountStatus() == 1
                        &&
                        account.getAccountType().equals(Data.AccountTypes.SAVINGS.toString())) {

                        System.out.println(account.getAccountType());
                        System.out.println(account.getAccountBalance());
                        System.out.println(account.getAccountNumber());
                        System.out.println(account.getCustomerId());
                        System.out.println(account.getAccountStatus());

                        //System.out.println(account);

                        Vector<Object> vector = new Vector<>();
                        vector.add(account.getCustomerId());
                        vector.add(account.getAccountNumber());
                        vector.add(account.getAccountType());
                        vector.add((Double)account.getAccountBalance());

                        model.addRow(vector);
                    }
                }
            } else {
                System.out.println("No Such Account Found");
            }
        } else {
            System.out.println("Please login first");
        }
    }

    boolean isDouble(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}
