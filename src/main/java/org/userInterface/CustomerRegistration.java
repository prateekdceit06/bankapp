/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.userInterface;

import org.backend.staticdata.SHA256;

import java.awt.*;
import java.awt.event.*;

//sql import
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author praneshjayasundar
 */
public class CustomerRegistration extends javax.swing.JFrame {

		// Variables declaration - do not modify                     
		private javax.swing.JLabel Registration;
		private java.awt.Button Reset;
		private java.awt.Button Submit;
		private javax.swing.JLabel address;
		private javax.swing.JTextArea addressValue;
		private javax.swing.JLabel email;
		private javax.swing.JTextField emailValue;
		private javax.swing.JLabel firstName;
		private javax.swing.JTextField firstNameValue;
		private javax.swing.JLabel successMsg;
		private javax.swing.JLabel res;
		private javax.swing.JScrollPane jScrollPane1;
		private javax.swing.JLabel lastName;
		private javax.swing.JTextField lastNameValue;
		private javax.swing.JLabel mobile;
		private javax.swing.JTextField mobileValue;
		private javax.swing.JLabel password;
		private javax.swing.JPasswordField passwordValue;
		private javax.swing.JLabel userName;
		private javax.swing.JTextField userNameValue;
		//sql variables
		Connection connection;
		
    /**
     * Creates new form NewJFrame
     */
    public CustomerRegistration() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lastName = new javax.swing.JLabel();
        lastNameValue = new javax.swing.JTextField();

        firstName = new javax.swing.JLabel();
		firstNameValue = new javax.swing.JTextField();

        userName = new javax.swing.JLabel();
		userNameValue = new javax.swing.JTextField();

        password = new javax.swing.JLabel();
		passwordValue = new javax.swing.JPasswordField();
        
        mobile = new javax.swing.JLabel();
        mobileValue = new javax.swing.JTextField();

        address = new javax.swing.JLabel();
		addressValue = new javax.swing.JTextArea();

        email = new javax.swing.JLabel();
        emailValue = new javax.swing.JTextField();

        Submit = new java.awt.Button();
        Reset = new java.awt.Button();

        jScrollPane1 = new javax.swing.JScrollPane();
        
        res = new javax.swing.JLabel();
        Registration = new javax.swing.JLabel();
        successMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Customer Registration Form");
        setBounds(new java.awt.Rectangle(400, 100, 900, 600));
        setMaximizedBounds(new java.awt.Rectangle(400, 100, 900, 600));
        setResizable(false);

        lastName.setText("Last Name");

        lastNameValue.setColumns(15);

        firstName.setText("First Name");

        userName.setText("Username");

        password.setText("Password");

        firstNameValue.setColumns(15);
        firstNameValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameValueActionPerformed(evt);
            }
        });

        userNameValue.setColumns(15);

        passwordValue.setColumns(15);
        passwordValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordValueActionPerformed(evt);
            }
        });

        mobile.setText("Mobile");

        mobileValue.setColumns(15);

        address.setText("Address");

        email.setText("Email");

        emailValue.setColumns(15);
        emailValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailValueActionPerformed(evt);
            }
        });

        Submit.setActionCommand("Submit");
        Submit.setLabel("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        Reset.setLabel("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        addressValue.setColumns(15);
        addressValue.setRows(5);
        jScrollPane1.setViewportView(addressValue);

        res.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        res.setText("Customer Registration Form");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(userName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(userNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(password)
                                    .addComponent(mobile)
                                    .addComponent(email)
                                    .addComponent(address))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(passwordValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(mobileValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(emailValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(68, 68, 68)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(successMsg)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstName)
                                    .addComponent(lastName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lastNameValue)
                                    .addComponent(firstNameValue)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(res))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Registration))
                        .addGap(76, 76, 76)
                        .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(res)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastName)
                    .addComponent(lastNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstName)
                    .addComponent(firstNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userName)
                    .addComponent(userNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password)
                    .addComponent(passwordValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobileValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mobile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(address))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addComponent(Registration))
                    .addComponent(successMsg, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>                        

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:

		String lastName;
		String firstName;
		String userName;
		String passwordHash = null;
		String mobile;
		String email;
		String address;
		Boolean isPasswordEmpty = true;
		
		//isactive and isemployee hardcoded as of now
		int isActive = 1;
		int isEmployee = 1;
		String sql = null;

		String data
			= "Last Name : "
			+ lastNameValue.getText() + "\n"
			+ "First Name : "
			+ firstNameValue.getText() + "\n"
			+ "Username : "
			+ userNameValue.getText() + "\n"
			+ "Password : "
			+ "********"+ "\n"
			+ "Mobile : "
			+ mobileValue.getText() + "\n"
			+ "Email : "
			+ emailValue.getText() + "\n";

		//System.out.println("Mobile: "+mobileValue.getText());

		String data3 = "Address : " + addressValue.getText();


		//access db
		try {
			// create a database connection
			connection = DriverManager.getConnection("jdbc:sqlite:src/bank.db");
			Statement statement = connection.createStatement();
			statement.setQueryTimeout(30);

			//get the user entered data - gunner
			lastName  = lastNameValue.getText();
			firstName = firstNameValue.getText();
			userName  = userNameValue.getText();
			email     = emailValue.getText();
			mobile    = mobileValue.getText();
			address   = addressValue.getText();

			//hashing the password
			char[] password = passwordValue.getPassword();
			String passwordText =  new String(password);
			  //System.out.println("Your password is: " + passwordText);

			if(passwordText != null && password.length != 0){
				System.out.println("Password not empty");
				passwordHash = SHA256.getSHA(passwordText);
				isPasswordEmpty = false;
			}

			//System.out.println(passwordText);

			System.out.println();

			//current date
			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
			   LocalDateTime currentDate = LocalDateTime.now();
			String date = dtf.format(currentDate);
			
			//Insert the record in to the login table

			if(!isPasswordEmpty){
				sql = "INSERT INTO customer_details (last_name, first_name, username, password, phone, address, email, is_active, is_employee, is_admin, created_date, updated_date) VALUES ('"
				+ lastName+"','"
				+firstName+"','"
				+userName+"','"
				+passwordHash+"','"
				+mobile+"','"
				+address+"','"
				+email+"','"
				+isActive+"','"
				+isEmployee+"','"
				+null+"','"
				+date+"','"
				+date+"')";

				
				System.out.println(sql);
				int x = statement.executeUpdate(sql);
				if (x > 0){         
					System.out.println("Successfully Inserted");
					successMsg.setText("Registration Successful");
				}  
				else{      
					System.out.println("Insert Failed");
					successMsg.setText("Registration Failed");
				}
				
				connection.close();
				

				//set default
				setDefault();
			}
			else{
				System.out.println("Insert Failed");
				successMsg.setText("Registration Failed");
			}
			

			}
			catch (SQLException e1) {
			// if the error message is "out of memory",
			// it probably means no database file is found
			//System.err.println(e1.getMessage());
			System.out.println("Insert Failed");
			successMsg.setText("Registration Failed");
			
		} catch (NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		} finally {
			try {
				if (connection != null)
					connection.close();
			} catch (SQLException e2) {
				// connection close failed.
				System.err.println(e2.getMessage());
			}
		}

    }                                      

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {                                      
		String def = "";
		setDefault();
		successMsg.setText(def);
    }                                     

    private void firstNameValueActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void passwordValueActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void emailValueActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

	public void setDefault(){
		String def = "";
		lastNameValue.setText(def);
		firstNameValue.setText(def);
		userNameValue.setText(def);
		passwordValue.setText(def);
		addressValue.setText(def);
		mobileValue.setText(def);
		emailValue.setText(def);
	}

    // End of variables declaration                   
}
