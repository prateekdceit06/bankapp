/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.userInterface;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Timer;
import java.util.Vector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.backend.Connect;
import org.backend.controllers.user.GetUser;
import org.backend.controllers.user.Logout;
import org.backend.controllers.user.UpdateUser;
import org.backend.models.Account;
import org.backend.models.Manager;
import org.backend.models.User;
import org.backend.staticdata.ConvertDate;
/**
 *
 * @author praneshjayasundar
 */
public class CustomerHome extends javax.swing.JDialog {

    static User loggedInUserGlobal;
    /**
     * Creates new form CustomerLogin
     */
    public CustomerHome(javax.swing.JDialog parent, boolean modal, User loggedInUser) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        loggedInUserGlobal = loggedInUser;
        addData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        content = new javax.swing.JPanel();
        updateDetails = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerDetails = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        transferOneToOther = new javax.swing.JButton();
        withdraw = new javax.swing.JButton();
        deposit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        applyLoan = new javax.swing.JButton();
        loanApplicationStatus = new javax.swing.JButton();
        loanPaymentDeposit = new javax.swing.JButton();
        loanPaymentAccount = new javax.swing.JButton();
        stockMarket = new javax.swing.JLabel();
        buyStock = new javax.swing.JButton();
        sellStock = new javax.swing.JButton();
        viewStockDetails1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        savingAccount = new javax.swing.JButton();
        checkingsAccount = new javax.swing.JButton();
        viewAccountDetails = new javax.swing.JButton();
        viewTransactionDetails = new javax.swing.JButton();
        changePassword = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        securitiesAccount = new javax.swing.JButton();
        openPositions = new javax.swing.JButton();
        viewClosedPositions = new javax.swing.JButton();
        viewStockTransactions = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        content.setBackground(new java.awt.Color(255, 255, 255));
        content.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        content.setToolTipText("Customer Details");

        updateDetails.setText("Update Details");
        updateDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDetailsActionPerformed(evt);
            }
        });

        customerDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Phone", "Address", "Email", "Username", "Password", "Active", "Employee", "Admin", "Customer", "Collateral", "Loan"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerDetails.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(customerDetails);
        customerDetails.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Personal Details");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setText("Fund Transfer");

        transferOneToOther.setText("Transfer from one account to another other");
        transferOneToOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferOneToOtherActionPerformed(evt);
            }
        });

        withdraw.setText("Withdraw");
        withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawActionPerformed(evt);
            }
        });

        deposit.setText("Deposit");
        deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setText("Get loan approval in minutes ");

        applyLoan.setText("Apply for Loan");
        applyLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyLoanActionPerformed(evt);
            }
        });

        loanApplicationStatus.setText("Loan application status");
        loanApplicationStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanApplicationStatusActionPerformed(evt);
            }
        });

        loanPaymentDeposit.setText("Loan payment by deposit");
        loanPaymentDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanPaymentDepositActionPerformed(evt);
            }
        });

        loanPaymentAccount.setText("Loan payment from account");
        loanPaymentAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanPaymentAccountActionPerformed(evt);
            }
        });

        stockMarket.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        stockMarket.setText("Stock Market");

        buyStock.setText("Buy Stock");
        buyStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyStockActionPerformed(evt);
            }
        });

        sellStock.setText("Sell Stock");
        sellStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellStockActionPerformed(evt);
            }
        });

        viewStockDetails1.setText("View Stock Details");
        viewStockDetails1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStockDetails1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel4.setText("Accounts & Transactions");

        savingAccount.setText("Create Saving Account");
        savingAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savingAccountActionPerformed(evt);
            }
        });

        checkingsAccount.setText("Create Checkings Account");
        checkingsAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkingsAccountActionPerformed(evt);
            }
        });

        viewAccountDetails.setText("View Account Details");
        viewAccountDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAccountDetailsActionPerformed(evt);
            }
        });

        viewTransactionDetails.setText("View Transaction Details");
        viewTransactionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTransactionDetailsActionPerformed(evt);
            }
        });

        changePassword.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        changePassword.setText("Change Password");
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });

        logout.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        logout.setText("Log Out");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        securitiesAccount.setText("Create Securities Account");
        securitiesAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securitiesAccountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(viewAccountDetails)
                                .addGap(18, 18, 18)
                                .addComponent(viewTransactionDetails))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(savingAccount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkingsAccount)
                                .addGap(18, 18, 18)
                                .addComponent(securitiesAccount)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(changePassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logout)
                        .addGap(72, 72, 72))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(changePassword)
                        .addComponent(logout))
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savingAccount)
                    .addComponent(checkingsAccount)
                    .addComponent(securitiesAccount))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewAccountDetails)
                    .addComponent(viewTransactionDetails))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        openPositions.setText("View Open Positions");
        openPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPositionsActionPerformed(evt);
            }
        });

        viewClosedPositions.setText("View Closed Positions");
        viewClosedPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewClosedPositionsActionPerformed(evt);
            }
        });

        viewStockTransactions.setText("View Stock Transactions");
        viewStockTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStockTransactionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(transferOneToOther, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(contentLayout.createSequentialGroup()
                                    .addComponent(withdraw)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(deposit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addComponent(loanPaymentAccount)
                                .addContainerGap(742, Short.MAX_VALUE))
                            .addGroup(contentLayout.createSequentialGroup()
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(loanPaymentDeposit)
                                    .addComponent(jLabel3)
                                    .addComponent(applyLoan)
                                    .addComponent(loanApplicationStatus))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stockMarket)
                                    .addGroup(contentLayout.createSequentialGroup()
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(viewStockDetails1)
                                            .addComponent(buyStock)
                                            .addComponent(sellStock))
                                        .addGap(18, 18, 18)
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(viewStockTransactions)
                                            .addComponent(viewClosedPositions)
                                            .addComponent(openPositions))))
                                .addGap(66, 66, 66))))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 85, Short.MAX_VALUE))))
            .addGroup(contentLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(542, 542, 542)
                .addComponent(updateDetails)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(updateDetails)
                .addGap(102, 102, 102)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(transferOneToOther)
                        .addGap(18, 18, 18)
                        .addComponent(withdraw)
                        .addGap(18, 18, 18)
                        .addComponent(deposit))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(applyLoan)
                                .addGap(18, 18, 18)
                                .addComponent(loanApplicationStatus)
                                .addGap(18, 18, 18)
                                .addComponent(loanPaymentDeposit))
                            .addGroup(contentLayout.createSequentialGroup()
                                .addComponent(stockMarket)
                                .addGap(18, 18, 18)
                                .addComponent(buyStock)
                                .addGap(18, 18, 18)
                                .addComponent(sellStock)
                                .addGap(18, 18, 18)
                                .addComponent(viewStockDetails1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                                .addComponent(openPositions)
                                .addGap(18, 18, 18)
                                .addComponent(viewClosedPositions)
                                .addGap(18, 18, 18)
                                .addComponent(viewStockTransactions)))
                        .addGap(18, 18, 18)
                        .addComponent(loanPaymentAccount)))
                .addContainerGap(141, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void savingAccountActionPerformed(java.awt.event.ActionEvent evt) {                                              
        SavingsAccount savingsAccount = new SavingsAccount(this, true, loggedInUserGlobal);
        savingsAccount.setVisible(true);
    }                                             

    private void checkingsAccountActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        CheckingsAccount checkingsAccount = new CheckingsAccount(this, true, loggedInUserGlobal);
        checkingsAccount.setVisible(true);
    }                                                

    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {                                               
        ChangePasswordPrompt changePassword = new ChangePasswordPrompt(this, true, loggedInUserGlobal);
        changePassword.setVisible(true);
    }     

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {                                       

        if (loggedInUserGlobal != null) {
            Logout logout = new Logout();
            boolean logoutSuccess = logout.logout(loggedInUserGlobal);
            if (logoutSuccess) {
                System.out.println("You have successfully logged out");
                JOptionPane.showMessageDialog(null, "You have successfully logged out");
                //System.out.println(loggedInUserGlobal.toString());
                loggedInUserGlobal = null;

                //close the Jdialog once logged out
                
                
            } else {
                System.out.println("Something went wrong. Logout failed.");
                JOptionPane.showMessageDialog(null, "Something went wrong. Logout failed.");
                
            }
        } else {
            System.out.println("Please login first");
            JOptionPane.showMessageDialog(null, "Please login first");
        }

        this.dispose();
    }                                      

    private void updateDetailsActionPerformed(java.awt.event.ActionEvent evt) {
        
        
        DefaultTableModel model =(DefaultTableModel) customerDetails.getModel();
        int selectedRow = customerDetails.getSelectedRow();

        //get the data from the customer home page
        int id = (int)model.getValueAt(selectedRow, 0);
        String firstName = model.getValueAt(selectedRow, 1).toString();
        String lastName = model.getValueAt(selectedRow, 2).toString();
        String mobile = model.getValueAt(selectedRow, 3).toString();
        String address = model.getValueAt(selectedRow, 4).toString();
        String email = model.getValueAt(selectedRow, 5).toString();
        String username = model.getValueAt(selectedRow, 6).toString();
        int is_active = (int)model.getValueAt(selectedRow, 8);
        int is_employee = (int)model.getValueAt(selectedRow, 9);
        int is_admin = (int)model.getValueAt(selectedRow, 10);
        int isCustomer = (int)model.getValueAt(selectedRow, 11);
        int hasCollateral = (int)model.getValueAt(selectedRow, 12);
        int hasLoan = (int)model.getValueAt(selectedRow, 13);
        
        User updatedUserDetails;
        Manager manager = new Manager();

        //User updatedUserDetails = new User(firstName, lastName, mobile, address, email, username, is_active, is_admin, is_employee, hasCollateral, hasLoan, isCustomer);

        //update user details
        if (loggedInUserGlobal != null) {
            int userId = 0;
            if (loggedInUserGlobal.getIsAdmin() == 1) {
                System.out.print("Enter ID: ");
                userId = id;
            } else {
                userId = id;
            }
            GetUser getUser = new GetUser();
            HashMap<String, String>  response = getUser.getUser(userId, loggedInUserGlobal);

            if (response.containsKey("status")) {
                if (response.get("status").equals("success")) {
                    updatedUserDetails = new User(id, firstName, lastName, mobile, address, email,
                    username, is_active, is_admin, is_employee, loggedInUserGlobal.getToken(), loggedInUserGlobal.getCreatedAt(),
                    loggedInUserGlobal.getUpdatedAt(), hasCollateral, hasLoan, isCustomer);
                        
                    
                    System.out.println(updatedUserDetails.toString());
                    UpdateUser updateUser = new UpdateUser();
                    boolean updateSuccess = updateUser.updateUser(loggedInUserGlobal, updatedUserDetails);

                    if (updateSuccess) {
                        System.out.println("User updated successfully");
                        manager.loadAllData();
                        loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
                        JOptionPane.showMessageDialog(null, "User updated successfully");
                    } else {
                        System.out.println("Something went wrong. User update failed.");
                        JOptionPane.showMessageDialog(null, "Something went wrong. User update failed.");
                    }

                } else {
                    System.out.println(response.get("message"));
                    JOptionPane.showMessageDialog(null, response.get("message"));
                }
            } else {
                System.out.println("Incorrect ID");
                JOptionPane.showMessageDialog(null, "Incorrect ID");
            }  
            
        } else {
            System.out.println("Please login first");
            JOptionPane.showMessageDialog(null, "Please login first");
        }

    }                                             

    private void viewAccountDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        AccountDetails accountDetails = new AccountDetails(this, true, loggedInUserGlobal);
        accountDetails.setVisible(true);
    }                                                  

    private void viewTransactionDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        TransactionDetails transactionDetails = new TransactionDetails(this, true, loggedInUserGlobal);
        transactionDetails.setVisible(true);
    }                                                      

    private void viewStockDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        StockDetails stockDetails = new StockDetails(this, true, loggedInUserGlobal);
        stockDetails.setVisible(true);
    }                                               

    private void transferOneToOtherActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        TransferFunds transferFunds = new TransferFunds(this, true, loggedInUserGlobal);
        transferFunds.setVisible(true);
    }                                                  

    private void withdrawActionPerformed(java.awt.event.ActionEvent evt) {                                         
        WithdrawFunds withdrawFunds = new WithdrawFunds(this, true, loggedInUserGlobal);
        withdrawFunds.setVisible(true);
    }                                        

    private void depositActionPerformed(java.awt.event.ActionEvent evt) {                                        
        DepositFunds depositFunds = new DepositFunds(this, true, loggedInUserGlobal);
        depositFunds.setVisible(true);
    }                                       

    private void applyLoanActionPerformed(java.awt.event.ActionEvent evt) {                                          
        ApplyLoan applyLoan = new ApplyLoan(this, true, loggedInUserGlobal);
        applyLoan.setVisible(rootPaneCheckingEnabled);
    }                                         

    private void loanApplicationStatusActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        LoanApplicationStatus loanStatus = new LoanApplicationStatus(this, true, loggedInUserGlobal);
        loanStatus.setVisible(true);
    }                                                     

    private void loanPaymentDepositActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        LoanPaymentDeposit loanPaymentDeposit = new LoanPaymentDeposit(this, true, loggedInUserGlobal);
        loanPaymentDeposit.setVisible(true);
    }                                                  

    private void loanPaymentAccountActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        LoanPaymentAccount loanPaymentAccount = new LoanPaymentAccount(this, true, loggedInUserGlobal);
        loanPaymentAccount.setVisible(true);
    }                                                 

    private void buyStockActionPerformed(java.awt.event.ActionEvent evt) {                                         
        BuyStocks buyStocks  = new BuyStocks(this, true, loggedInUserGlobal);
        buyStocks.setVisible(true);
    }                                        

    private void sellStockActionPerformed(java.awt.event.ActionEvent evt) {                                          
        SellStocks sellStocks  = new SellStocks(this, true, loggedInUserGlobal);
        sellStocks.setVisible(true);
    }                                         

    private void viewStockDetails1ActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        StockDetails stockDetails = new StockDetails(this, true, loggedInUserGlobal);
        stockDetails.setVisible(true);
    }                                                

    private void securitiesAccountActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        SecuritiesAccount securitiesAccount = new SecuritiesAccount(this, true, loggedInUserGlobal);
        securitiesAccount.setVisible(true);    
    }                                                 

    private void openPositionsActionPerformed(java.awt.event.ActionEvent evt) {                                              
        ViewOpenPostions openPositions = new ViewOpenPostions(this, true, loggedInUserGlobal);
        openPositions.setVisible(true);      
    }                                             

    private void viewClosedPositionsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        ViewClosedPostions closedPositions = new ViewClosedPostions(this, true, loggedInUserGlobal);
        closedPositions.setVisible(true);    
    }                                                   

    private void viewStockTransactionsActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        ViewStockTransactions stockTransactions = new ViewStockTransactions(this, true, loggedInUserGlobal);
        stockTransactions.setVisible(true);    
    }                                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CustomerHome dialog = new CustomerHome(new javax.swing.JDialog(), true, loggedInUserGlobal);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton applyLoan;
    private javax.swing.JButton buyStock;
    private javax.swing.JButton changePassword;
    private javax.swing.JButton checkingsAccount;
    private javax.swing.JPanel content;
    private javax.swing.JTable customerDetails;
    private javax.swing.JButton deposit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loanApplicationStatus;
    private javax.swing.JButton loanPaymentAccount;
    private javax.swing.JButton loanPaymentDeposit;
    private javax.swing.JButton logout;
    private javax.swing.JButton openPositions;
    private javax.swing.JButton savingAccount;
    private javax.swing.JButton securitiesAccount;
    private javax.swing.JButton sellStock;
    private javax.swing.JLabel stockMarket;
    private javax.swing.JButton transferOneToOther;
    private javax.swing.JButton updateDetails;
    private javax.swing.JButton viewAccountDetails;
    private javax.swing.JButton viewClosedPositions;
    private javax.swing.JButton viewStockDetails1;
    private javax.swing.JButton viewStockTransactions;
    private javax.swing.JButton viewTransactionDetails;
    private javax.swing.JButton withdraw;
    // End of variables declaration
    
    public void addData(){

        String[] columns = new String [] {
            "ID", "First Name", "Last Name", "Phone", "Address", "Email", "Username", "Password", "Active", "Employee", "Admin", "Customer", "Collateral", "Loan"
        };

        DefaultTableModel model = (DefaultTableModel)customerDetails.getModel();
        model.setColumnIdentifiers(columns);

        int ID = loggedInUserGlobal.getId();
        String firstName = loggedInUserGlobal.getFirstName();
        String lastName = loggedInUserGlobal.getLastName();
        String userName = loggedInUserGlobal.getUserName();
        String password = "********";
        String email = loggedInUserGlobal.getEmail();
        String mobile = loggedInUserGlobal.getPhone();
        int isActive = loggedInUserGlobal.getIsActive();
        int isEmployee = loggedInUserGlobal.getIsEmployee();
        int isAdmin = loggedInUserGlobal.getIsAdmin();

        int hasCollateral = loggedInUserGlobal.getHasCollateral();
        int hasLoan = loggedInUserGlobal.getHasLoan();
        int isCustomer = loggedInUserGlobal.getIsCustomer();

        String address = loggedInUserGlobal.getAddress();

        Vector<Object> vector = new Vector<>();
        vector.add(ID);
        vector.add(firstName);
        vector.add(lastName);
        vector.add(mobile);
        vector.add(address);
        vector.add(email);
        vector.add(userName);
        vector.add(password);
        vector.add(isActive);
        vector.add(isEmployee);
        vector.add(isAdmin);
        vector.add(isCustomer);
        vector.add(hasCollateral);
        vector.add(hasLoan);

        model.addRow(vector);
        System.out.println("Pranesh: "+ID);
    }
}
