/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.userInterface;

import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.backend.models.Account;
import org.backend.models.AccountLoan;
import org.backend.models.ApprovedLoan;
import org.backend.models.Customer;
import org.backend.models.Manager;
import org.backend.models.User;
import org.backend.staticdata.Data;

/**
 *
 * @author praneshjayasundar
 */
public class LoanPaymentAccount extends javax.swing.JDialog {

    static User loggedInUserGlobal;
    /**
     * Creates new form LoanPaymentDeposit
     */
    public LoanPaymentAccount(javax.swing.JDialog parent, boolean modal, User loggedInUser) {
        super(parent, modal);
        loggedInUserGlobal = loggedInUser;
        initComponents();
        setLocationRelativeTo(null);
        addAccountData();
        addLoanData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        loanAmount = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loanAmountvalue = new javax.swing.JTextField();
        pay = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        accountNumber = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loanTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        loanAmount.setBackground(new java.awt.Color(255, 255, 255));
        
        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("Loan Payment from Account");

        jLabel2.setText("Pay Loan Amount ");

        loanAmountvalue.setColumns(15);

        pay.setText("Pay");
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });

        accountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Account Number", "Account Type", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(accountTable);

        accountNumber.setText("Account Number");

        loanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loan ID", "Customer ID", "Account Number", "Sanctioned Amount", "Loan Interest", "Loan Interest Unit", "Remaining Loan Amount", "Duration", "Monthly Payment Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(loanTable);

        jLabel3.setText("Loan Account");

        javax.swing.GroupLayout loanAmountLayout = new javax.swing.GroupLayout(loanAmount);
        loanAmount.setLayout(loanAmountLayout);
        loanAmountLayout.setHorizontalGroup(
            loanAmountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loanAmountLayout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addComponent(accountNumber)
                .addGap(52, 52, 52)
                .addGroup(loanAmountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loanAmountvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pay))
                .addGap(48, 48, 48))
            .addGroup(loanAmountLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(loanAmountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(loanAmountLayout.createSequentialGroup()
                .addGap(521, 521, 521)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        loanAmountLayout.setVerticalGroup(
            loanAmountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loanAmountLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(loanAmountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(loanAmountLayout.createSequentialGroup()
                        .addComponent(accountNumber)
                        .addGap(106, 106, 106)
                        .addComponent(jLabel3)
                        .addGap(76, 76, 76))
                    .addGroup(loanAmountLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)))
                .addGap(34, 34, 34)
                .addGroup(loanAmountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(loanAmountvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(pay)
                .addGap(61, 61, 61))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loanAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(loanAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void payActionPerformed(java.awt.event.ActionEvent evt) {                                    
        if (loggedInUserGlobal != null) {
            System.out.println("Enter Loan Details");

            DefaultTableModel accountModel = (DefaultTableModel)accountTable.getModel();
            int selectedRow1 = accountTable.getSelectedRow();
            String fromAccountNo = accountModel.getValueAt(selectedRow1, 1).toString();

            DefaultTableModel loanModel = (DefaultTableModel)loanTable.getModel();
            int selectedRow2 = loanTable.getSelectedRow();
            int loanId = Integer.parseInt(loanModel.getValueAt(selectedRow2, 0).toString());

            if(!isDouble(loanAmountvalue.getText().toString())){
                JOptionPane.showMessageDialog(null, "Please enter a valid amount");
                return;
            }

            double amount = Double.parseDouble(loanAmountvalue.getText().toString());

            //find loan in manager loans

            Manager manager = new Manager();
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            Customer customer = new Customer();
            for (Customer cust : manager.getCustomers()) {
                if (cust.getId() == loggedInUserGlobal.getId()) {
                    customer = cust;
                    break;
                }
            }
            Account tempAccount = null;
            for(Account account: manager.getAccounts()){
                if(account.getAccountNumber().equals(fromAccountNo)){
                    tempAccount = account;
                    break;
                }
            }

            if (customer.getApprovedLoans() != null) {
                for (ApprovedLoan approvedLoan : customer.getApprovedLoans()) {
                    if (approvedLoan.getLoanId() == loanId) {
                        for (AccountLoan loanAccount : manager.getLoanAccounts()) {
                            if (loanAccount.getAccountNumber().equals(approvedLoan.getAccountNumber())) {
                                //pay loan
                                boolean loanPaid = loanAccount.payLoan(loanId, amount, tempAccount,
                                        manager.getBankAccountNumber(), customer);
                                if (loanPaid) {
                                    System.out.println("Loan Paid");
                                    JOptionPane.showMessageDialog(null, "Loan Repayment Paid: "+amount);
                                } else {
                                    System.out.println("Something went wrong. Loan Payment Failed.");
                                    JOptionPane.showMessageDialog(null, "Something went wrong. Loan Payment Failed.");
                                }
                                break;
                            }
                        }
                    }
                }
                manager.loadAllData();
                loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            } else {
                System.out.println("No Such Loan Found");
            }

            this.dispose();
        }
    }                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoanPaymentAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoanPaymentAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoanPaymentAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoanPaymentAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoanPaymentAccount dialog = new LoanPaymentAccount(new javax.swing.JDialog(), true, loggedInUserGlobal);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel accountNumber;
    private javax.swing.JTable accountTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField loanAmountvalue;
    private javax.swing.JPanel loanAmount;
    private javax.swing.JTable loanTable;
    private javax.swing.JButton pay;
    // End of variables declaration
    
    public void addAccountData(){

        //add senders account data
        if (loggedInUserGlobal != null) {

            String[] columns = new String [] {
                "Customer ID", "Account Number", "Account Type", "Balance"
            };

            DefaultTableModel model = (DefaultTableModel)accountTable.getModel();
            model.setColumnIdentifiers(columns);

            Manager manager = new Manager();

            //find account in manager accounts
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            if (manager.getAccounts() != null) {
                for (Account account : manager.getAccounts()) {
                    if ((account.getCustomerId() == loggedInUserGlobal.getId() || loggedInUserGlobal.getIsAdmin() == 1) 
                        &&
                        account.getAccountStatus() == 1
                        &&
                        !account.getAccountType().equals(Data.AccountTypes.LOAN.toString())) {

                        //System.out.println(account);

                        Vector<Object> vector = new Vector<>();
                        vector.add(account.getCustomerId());
                        vector.add(account.getAccountNumber());
                        vector.add(account.getAccountType());
                        vector.add((Double)account.getAccountBalance());

                        model.addRow(vector);
                    }
                }
            } else {
                System.out.println("No Such Account Found");
            }
        } else {
            System.out.println("Please login first");
        }
    }

    public void addLoanData(){

        String[] columns = new String [] {
            "Loan ID", "Customer ID", "Account Number", "Sanctioned Amount", "Loan Interest", "Loan Interest Unit", "Remaining Loan Amount", "Duration", "Monthly Payment Amount"
        };

        DefaultTableModel model = (DefaultTableModel)loanTable.getModel();
        model.setColumnIdentifiers(columns);

        if (loggedInUserGlobal != null) {
            System.out.println("Enter Loan Details");
            //find loan in manager loans

            Manager manager = new Manager();
            manager.loadAllData();
            loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            Customer customer = new Customer();
            for (Customer cust : manager.getCustomers()) {
                if (cust.getId() == loggedInUserGlobal.getId()) {
                    customer = cust;
                    break;
                }

            }
            if (customer.getApprovedLoans() != null) {
                for (ApprovedLoan approvedLoan : customer.getApprovedLoans()) {
                    if(approvedLoan.getCustomerId() == loggedInUserGlobal.getId()){
                        

                        Vector<Object> vector = new Vector<>();
                        vector.add(approvedLoan.getLoanId());
                        vector.add(approvedLoan.getCustomerId());
                        vector.add(approvedLoan.getAccountNumber());
                        vector.add(approvedLoan.getSanctionedAmount());
                        vector.add(approvedLoan.getLoanInterestRate());
                        vector.add(approvedLoan.getLoanInterestUnit());
                        vector.add(approvedLoan.getRemainingLoanAmount());
                        vector.add(approvedLoan.getLoanDurationInMonths());
                        vector.add(approvedLoan.getMonthlyPaymentAmount());

                        model.addRow(vector);

                    }
                }
                manager.loadAllData();
                loggedInUserGlobal = manager.getLoggedInUser(loggedInUserGlobal.getId());
            } else {
                System.out.println("No Such Loan Found");
            }
        }
    }

    boolean isDouble(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

}
