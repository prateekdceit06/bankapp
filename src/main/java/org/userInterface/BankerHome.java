/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.userInterface;

import java.util.HashMap;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.backend.controllers.user.GetUser;
import org.backend.controllers.user.Logout;
import org.backend.controllers.user.UpdateUser;
import org.backend.models.Manager;
import org.backend.models.User;

/**
 *
 * @author praneshjayasundar
 */
public class BankerHome extends javax.swing.JDialog {

    static User loggedInUserGlobal;
    //static Manager managerGloabl;
    /**
     * Creates new form CustomerLogin
     */
    public BankerHome(javax.swing.JDialog parent, boolean modal, User loggedInUser) {
        super(parent, modal);
        loggedInUserGlobal = loggedInUser;
        initComponents();
        setLocationRelativeTo(null);
        addData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        label1 = new java.awt.Label();
        loanPaymentDeposit = new javax.swing.JButton();
        content = new javax.swing.JPanel();
        updateDetails = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerDetails = new javax.swing.JTable();
        savingAccount = new javax.swing.JButton();
        checkingsAccount = new javax.swing.JButton();
        personalDetailsLabel = new javax.swing.JLabel();
        viewAccountDetails = new javax.swing.JButton();
        viewTransactionDetails = new javax.swing.JButton();
        viewStockDetails = new javax.swing.JButton();
        fundTransfer = new javax.swing.JLabel();
        transferOneToOther = new javax.swing.JButton();
        withdraw = new javax.swing.JButton();
        deposit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        applyLoan = new javax.swing.JButton();
        loanApplicationStatus = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        loanPaymentAccount = new javax.swing.JButton();
        loanPaymentDepositValue = new javax.swing.JButton();
        stockMarket = new javax.swing.JLabel();
        buyStock = new javax.swing.JButton();
        sellStock = new javax.swing.JButton();
        securitiesAccount = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        getUserByUserID = new javax.swing.JButton();
        getUserByUserName = new javax.swing.JButton();
        getAllUsers = new javax.swing.JButton();
        showActiveUsers = new javax.swing.JButton();
        showInactiveUsers = new javax.swing.JButton();
        changePassword = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        showActiveCustomers = new javax.swing.JButton();
        showInactiveCustomers = new javax.swing.JButton();
        showSavingsAccount = new javax.swing.JButton();
        showCheckingsAccount = new javax.swing.JButton();
        loanApplicationApproval = new javax.swing.JButton();
        loanApplicationReceived = new javax.swing.JButton();
        updateStocks = new javax.swing.JButton();
        poorCustomers = new javax.swing.JButton();
        showTransactionHistory = new javax.swing.JButton();
        payInterest = new javax.swing.JButton();
        loadStocks = new javax.swing.JButton();
        openPositions = new javax.swing.JButton();
        viewClosedPositions = new javax.swing.JButton();
        viewStockTransactions = new javax.swing.JButton();

        label1.setText("label1");

        loanPaymentDeposit.setText("Loan payment by deposit");
        loanPaymentDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanPaymentDepositActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        content.setBackground(new java.awt.Color(255, 255, 255));
        content.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        content.setToolTipText("Customer Details");
        content.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        updateDetails.setText("Update Details");
        updateDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDetailsActionPerformed(evt);
            }
        });

        customerDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Phone", "Address", "Email", "Username", "Password", "Active", "Employee", "Admin", "Customer", "Collateral", "Loan"
        }
    ) {
        Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
        };
        boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, false, false, false, false, false, false, false
        };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerDetails.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(customerDetails);
        customerDetails.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        savingAccount.setText("Create Saving Account");
        savingAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savingAccountActionPerformed(evt);
            }
        });

        checkingsAccount.setText("Create Checkings Account");
        checkingsAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkingsAccountActionPerformed(evt);
            }
        });

        personalDetailsLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        personalDetailsLabel.setText("Personal Details");

        viewAccountDetails.setText("View Account Details");
        viewAccountDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAccountDetailsActionPerformed(evt);
            }
        });

        viewTransactionDetails.setText("View Transaction Details");
        viewTransactionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTransactionDetailsActionPerformed(evt);
            }
        });

        viewStockDetails.setText("View Stock Details");
        viewStockDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStockDetailsActionPerformed(evt);
            }
        });

        fundTransfer.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        fundTransfer.setText("Fund Transfer");

        transferOneToOther.setText("Fund transfer to another account");
        transferOneToOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferOneToOtherActionPerformed(evt);
            }
        });

        withdraw.setText("Withdraw");
        withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawActionPerformed(evt);
            }
        });

        deposit.setText("Deposit");
        deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setText("Get loan approval in minutes ");

        applyLoan.setText("Apply for Loan");
        applyLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyLoanActionPerformed(evt);
            }
        });

        loanApplicationStatus.setText("Loan application status");
        loanApplicationStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanApplicationStatusActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Accounts & Transactions");

        loanPaymentAccount.setText("Loan payment from account");
        loanPaymentAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanPaymentAccountActionPerformed(evt);
            }
        });

        loanPaymentDepositValue.setText("Loan payment by deposit");
        loanPaymentDepositValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanPaymentDepositValueActionPerformed(evt);
            }
        });

        stockMarket.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        stockMarket.setText("Stock Market");

        buyStock.setText("Buy Stock");
        buyStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyStockActionPerformed(evt);
            }
        });

        sellStock.setText("Sell Stock");
        sellStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellStockActionPerformed(evt);
            }
        });

        securitiesAccount.setText("Create Securities Account");
        securitiesAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securitiesAccountActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        getUserByUserID.setText("Get User By User ID");
        getUserByUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUserByUserIDActionPerformed(evt);
            }
        });

        getUserByUserName.setText("Get User By Username");
        getUserByUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUserByUserNameActionPerformed(evt);
            }
        });

        getAllUsers.setText("Get All Users");
        getAllUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllUsersActionPerformed(evt);
            }
        });

        showActiveUsers.setText("Show Active Users");
        showActiveUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActiveUsersActionPerformed(evt);
            }
        });

        showInactiveUsers.setText("Show Inactive Users");
        showInactiveUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInactiveUsersActionPerformed(evt);
            }
        });

        changePassword.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        changePassword.setText("Change Password");
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });

        logout.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        logout.setText("Log Out");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        showActiveCustomers.setText("Show Active Customers");
        showActiveCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActiveCustomersActionPerformed(evt);
            }
        });

        showInactiveCustomers.setText("Show Inactive Customers");
        showInactiveCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInactiveCustomersActionPerformed(evt);
            }
        });

        showSavingsAccount.setText("Show Savings Account");
        showSavingsAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSavingsAccountActionPerformed(evt);
            }
        });

        showCheckingsAccount.setText("Show Checkings Account");
        showCheckingsAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCheckingsAccountActionPerformed(evt);
            }
        });

        loanApplicationApproval.setText("Loan Application Pending Approval");
        loanApplicationApproval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanApplicationApprovalActionPerformed(evt);
            }
        });

        loanApplicationReceived.setText("Loan Applications Received");
        loanApplicationReceived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanApplicationReceivedActionPerformed(evt);
            }
        });

        updateStocks.setText("Update Stocks");
        updateStocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStocksActionPerformed(evt);
            }
        });

        poorCustomers.setText("Show Poor Customers");
        poorCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poorCustomersActionPerformed(evt);
            }
        });

        showTransactionHistory.setText("Show Transaction History");
        showTransactionHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTransactionHistoryActionPerformed(evt);
            }
        });

        payInterest.setText("Pay Interest");
        payInterest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payInterestActionPerformed(evt);
            }
        });

        loadStocks.setText("Load Stocks");
        loadStocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadStocksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(getUserByUserID)
                        .addGap(18, 18, 18)
                        .addComponent(getUserByUserName)
                        .addGap(18, 18, 18)
                        .addComponent(getAllUsers)
                        .addGap(18, 18, 18)
                        .addComponent(showActiveUsers)
                        .addGap(18, 18, 18)
                        .addComponent(showInactiveUsers))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loanApplicationApproval)
                        .addGap(18, 18, 18)
                        .addComponent(loanApplicationReceived)
                        .addGap(18, 18, 18)
                        .addComponent(updateStocks)
                        .addGap(18, 18, 18)
                        .addComponent(loadStocks))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(showActiveCustomers)
                        .addGap(18, 18, 18)
                        .addComponent(showInactiveCustomers)
                        .addGap(18, 18, 18)
                        .addComponent(showSavingsAccount)
                        .addGap(18, 18, 18)
                        .addComponent(showCheckingsAccount))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(poorCustomers)
                        .addGap(18, 18, 18)
                        .addComponent(showTransactionHistory)
                        .addGap(18, 18, 18)
                        .addComponent(payInterest)))
                .addGap(155, 155, 155)
                .addComponent(changePassword)
                .addGap(18, 18, 18)
                .addComponent(logout)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(changePassword)
                        .addComponent(logout))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(getUserByUserName)
                            .addComponent(getUserByUserID)
                            .addComponent(getAllUsers)
                            .addComponent(showActiveUsers)
                            .addComponent(showInactiveUsers))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showActiveCustomers)
                            .addComponent(showInactiveCustomers)
                            .addComponent(showSavingsAccount)
                            .addComponent(showCheckingsAccount))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loanApplicationApproval)
                            .addComponent(loanApplicationReceived)
                            .addComponent(updateStocks)
                            .addComponent(loadStocks))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(poorCustomers)
                    .addComponent(showTransactionHistory)
                    .addComponent(payInterest))
                .addGap(22, 22, 22))
        );

        openPositions.setText("View Open Positions");
        openPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPositionsActionPerformed(evt);
            }
        });

        viewClosedPositions.setText("View Closed Positions");
        viewClosedPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewClosedPositionsActionPerformed(evt);
            }
        });

        viewStockTransactions.setText("View Stock Transactions");
        viewStockTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStockTransactionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(savingAccount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkingsAccount)
                        .addGap(18, 18, 18)
                        .addComponent(securitiesAccount))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(466, 466, 466)
                        .addComponent(updateDetails))
                    .addComponent(personalDetailsLabel)
                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(contentLayout.createSequentialGroup()
                            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(contentLayout.createSequentialGroup()
                                    .addComponent(deposit)
                                    .addGap(307, 307, 307))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(withdraw)
                                        .addComponent(transferOneToOther)
                                        .addComponent(fundTransfer))
                                    .addGap(163, 163, 163)))
                            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(applyLoan)
                                .addComponent(loanApplicationStatus)
                                .addComponent(loanPaymentAccount)
                                .addComponent(loanPaymentDepositValue))
                            .addGap(210, 210, 210)
                            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(stockMarket)
                                .addGroup(contentLayout.createSequentialGroup()
                                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(buyStock)
                                        .addComponent(sellStock)
                                        .addComponent(viewStockDetails))
                                    .addGap(36, 36, 36)
                                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(viewStockTransactions)
                                        .addComponent(viewClosedPositions)
                                        .addComponent(openPositions))))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(viewAccountDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewTransactionDetails)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(personalDetailsLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(updateDetails)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savingAccount)
                    .addComponent(checkingsAccount)
                    .addComponent(securitiesAccount))
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewAccountDetails)
                    .addComponent(viewTransactionDetails))
                .addGap(42, 42, 42)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(fundTransfer)
                        .addGap(18, 18, 18)
                        .addComponent(transferOneToOther)
                        .addGap(18, 18, 18)
                        .addComponent(withdraw))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(stockMarket))
                        .addGap(18, 18, 18)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(applyLoan)
                            .addComponent(buyStock)
                            .addComponent(openPositions))
                        .addGap(18, 18, 18)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loanApplicationStatus)
                            .addComponent(sellStock)
                            .addComponent(viewClosedPositions))))
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deposit)
                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(loanPaymentDepositValue)
                        .addComponent(viewStockDetails)
                        .addComponent(viewStockTransactions)))
                .addGap(18, 18, 18)
                .addComponent(loanPaymentAccount)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void savingAccountActionPerformed(java.awt.event.ActionEvent evt) {
        SavingsAccount savingsAccount = new SavingsAccount(this, true, loggedInUserGlobal);
        savingsAccount.setVisible(true);
    }

    private void checkingsAccountActionPerformed(java.awt.event.ActionEvent evt) {
        CheckingsAccount checkingsAccount = new CheckingsAccount(this, true, loggedInUserGlobal);
        checkingsAccount.setVisible(true);
    }

    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {
        ChangePasswordPrompt changePassword = new ChangePasswordPrompt(this, true, loggedInUserGlobal);
        changePassword.setVisible(true);
    }

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {

        if (loggedInUserGlobal != null) {
            Logout logout = new Logout();
            boolean logoutSuccess = logout.logout(loggedInUserGlobal);
            if (logoutSuccess) {
                System.out.println("You have successfully logged out");
                JOptionPane.showMessageDialog(null, "You have successfully logged out");
                //System.out.println(loggedInUserGlobal.toString());
                loggedInUserGlobal = null;

                //close the Jdialog once logged out
                this.dispose();

            } else {
                System.out.println("Something went wrong. Logout failed.");
                JOptionPane.showMessageDialog(null, "Something went wrong. Logout failed.");
            }
        } else {
            System.out.println("Please login first");
            JOptionPane.showMessageDialog(null, "Please login first");
        }
    }

    private void updateDetailsActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model =(DefaultTableModel) customerDetails.getModel();
        int selectedRow = customerDetails.getSelectedRow();

        //get the data from the customer home page
        int id = (int)model.getValueAt(selectedRow, 0);
        String firstName = model.getValueAt(selectedRow, 1).toString();
        String lastName = model.getValueAt(selectedRow, 2).toString();
        String mobile = model.getValueAt(selectedRow, 3).toString();
        String address = model.getValueAt(selectedRow, 4).toString();
        String email = model.getValueAt(selectedRow, 5).toString();
        String username = model.getValueAt(selectedRow, 6).toString();
        int is_active = (int)model.getValueAt(selectedRow, 8);
        int is_employee = (int)model.getValueAt(selectedRow, 9);
        int is_admin = (int)model.getValueAt(selectedRow, 10);
        int isCustomer = (int)model.getValueAt(selectedRow, 11);
        int hasCollateral = (int)model.getValueAt(selectedRow, 12);
        int hasLoan = (int)model.getValueAt(selectedRow, 13);

        User updatedUserDetails;

        //User updatedUserDetails = new User(firstName, lastName, mobile, address, email, username, is_active, is_admin, is_employee, hasCollateral, hasLoan, isCustomer);

        //update user details
        if (loggedInUserGlobal != null) {
            int userId = 0;
            if (loggedInUserGlobal.getIsAdmin() == 1) {
                System.out.print("Enter ID: ");
                userId = id;
            } else {
                userId = id;
            }
            GetUser getUser = new GetUser();
            HashMap<String, String>  response = getUser.getUser(userId, loggedInUserGlobal);

            if (response.containsKey("status")) {
                if (response.get("status").equals("success")) {
                    updatedUserDetails = new User(id, firstName, lastName, mobile, address, email,
                            username, is_active, is_admin, is_employee, loggedInUserGlobal.getToken(), loggedInUserGlobal.getCreatedAt(),
                            loggedInUserGlobal.getUpdatedAt(), hasCollateral, hasLoan, isCustomer);


                    System.out.println(updatedUserDetails.toString());
                    UpdateUser updateUser = new UpdateUser();
                    boolean updateSuccess = updateUser.updateUser(loggedInUserGlobal, updatedUserDetails);

                    if (updateSuccess) {
                        System.out.println("User updated successfully");
                        JOptionPane.showMessageDialog(null, "User updated successfully");
                    } else {
                        System.out.println("Something went wrong. User update failed.");
                        JOptionPane.showMessageDialog(null, "Something went wrong. User update failed.");
                    }

                } else {
                    System.out.println(response.get("message"));
                    JOptionPane.showMessageDialog(null, response.get("message"));
                }
            } else {
                System.out.println("Incorrect ID");
                JOptionPane.showMessageDialog(null, "Incorrect ID");
            }

        } else {
            System.out.println("Please login first");
            JOptionPane.showMessageDialog(null, "Please login first");
        }
    }

    private void getUserByUserIDActionPerformed(java.awt.event.ActionEvent evt) {
        GetUserByUserID guid = new GetUserByUserID(this, true, loggedInUserGlobal);
        guid.setVisible(true);
    }

    private void getUserByUserNameActionPerformed(java.awt.event.ActionEvent evt) {
        GetUserByUserName guid = new GetUserByUserName(this, true, loggedInUserGlobal);
        guid.setVisible(true);
    }

    private void getAllUsersActionPerformed(java.awt.event.ActionEvent evt) {
        GetAllUsersDisplay gAll = new GetAllUsersDisplay(this, true, loggedInUserGlobal);
        gAll.setVisible(true);
    }

    private void showActiveUsersActionPerformed(java.awt.event.ActionEvent evt) {
        ActiveUsers activeUsers = new ActiveUsers(this, true, loggedInUserGlobal);
        activeUsers.setVisible(true);
    }

    private void showInactiveUsersActionPerformed(java.awt.event.ActionEvent evt) {
        InactiveUsers inactiveUsers = new InactiveUsers(this, true, loggedInUserGlobal);
        inactiveUsers.setVisible(true);
    }

    private void showActiveCustomersActionPerformed(java.awt.event.ActionEvent evt) {
        ActiveCustomers activeCustomers = new ActiveCustomers(this, true, loggedInUserGlobal);
        activeCustomers.setVisible(true);
    }

    private void showInactiveCustomersActionPerformed(java.awt.event.ActionEvent evt) {
        InactiveCustomers inActiveCustomers = new InactiveCustomers(this, true, loggedInUserGlobal);
        inActiveCustomers.setVisible(true);
    }

    private void showSavingsAccountActionPerformed(java.awt.event.ActionEvent evt) {
        ShowSavingsAccounts showSavingsAccount = new ShowSavingsAccounts(this, true, loggedInUserGlobal);
        showSavingsAccount.setVisible(true);
    }

    private void showCheckingsAccountActionPerformed(java.awt.event.ActionEvent evt) {
        ShowCheckingsAccounts showCheckingsAccount = new ShowCheckingsAccounts(this, true, loggedInUserGlobal);
        showCheckingsAccount.setVisible(true);
    }

    private void viewAccountDetailsActionPerformed(java.awt.event.ActionEvent evt) {
        AccountDetails vad = new AccountDetails(this, true, loggedInUserGlobal);
        vad.setVisible(true);
    }

    private void viewTransactionDetailsActionPerformed(java.awt.event.ActionEvent evt) {
        TransactionDetails transactionDetails = new TransactionDetails(this, true, loggedInUserGlobal);
        transactionDetails.setVisible(true);
    }

    private void viewStockDetailsActionPerformed(java.awt.event.ActionEvent evt) {
        StockDetails stockDetails = new StockDetails(this, true, loggedInUserGlobal);
        stockDetails.setVisible(true);
    }

    private void transferOneToOtherActionPerformed(java.awt.event.ActionEvent evt) {
        TransferFunds transferFunds = new TransferFunds(this, true, loggedInUserGlobal);
        transferFunds.setVisible(true);
    }

    private void withdrawActionPerformed(java.awt.event.ActionEvent evt) {
        WithdrawFunds withdrawFunds = new WithdrawFunds(this, true, loggedInUserGlobal);
        withdrawFunds.setVisible(true);
    }

    private void depositActionPerformed(java.awt.event.ActionEvent evt) {
        DepositFunds depositFunds = new DepositFunds(this, true, loggedInUserGlobal);
        depositFunds.setVisible(true);
    }

    private void applyLoanActionPerformed(java.awt.event.ActionEvent evt) {
        ApplyLoan applyLoan = new ApplyLoan(this, true, loggedInUserGlobal);
        applyLoan.setVisible(rootPaneCheckingEnabled);    }

    private void loanApplicationStatusActionPerformed(java.awt.event.ActionEvent evt) {
        LoanApplicationStatus loanStatus = new LoanApplicationStatus(this, true, loggedInUserGlobal);
        loanStatus.setVisible(true);    }

    private void loanApplicationApprovalActionPerformed(java.awt.event.ActionEvent evt) {
        LoanApplicationApproval loanApplicationApproval = new LoanApplicationApproval(this, true, loggedInUserGlobal);
        loanApplicationApproval.setVisible(true);
    }

    private void loanApplicationReceivedActionPerformed(java.awt.event.ActionEvent evt) {
        LoanApplicationReceived loanApplicationReceived = new LoanApplicationReceived(this, true, loggedInUserGlobal);
        loanApplicationReceived.setVisible(true);
    }

    private void loanPaymentAccountActionPerformed(java.awt.event.ActionEvent evt) {
        LoanPaymentAccount loanPaymentAccount = new LoanPaymentAccount(this, true, loggedInUserGlobal);
        loanPaymentAccount.setVisible(true);
    }

    private void loanPaymentDepositActionPerformed(java.awt.event.ActionEvent evt) {
        LoanPaymentDeposit loanPaymentDeposit = new LoanPaymentDeposit(this, true, loggedInUserGlobal);
        loanPaymentDeposit.setVisible(true);
    }

    private void updateStocksActionPerformed(java.awt.event.ActionEvent evt) {
        UpdateStocks updateStocks = new UpdateStocks(this, true, loggedInUserGlobal);
        updateStocks.setVisible(true);
    }

    private void loanPaymentDepositValueActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void showTransactionHistoryActionPerformed(java.awt.event.ActionEvent evt) {
        BankerTransactionDetails bankTransactionHistory = new BankerTransactionDetails(this, true, loggedInUserGlobal);
        bankTransactionHistory.setVisible(true);
    }

    private void poorCustomersActionPerformed(java.awt.event.ActionEvent evt) {
        ShowPoorCustomers poorCustomers = new ShowPoorCustomers(this, true, loggedInUserGlobal);
        poorCustomers.setVisible(true);
    }

    private void payInterestActionPerformed(java.awt.event.ActionEvent evt) {
        PayInterest payInterest = new PayInterest(this, true, loggedInUserGlobal);
        payInterest.setVisible(true);
    }

    private void buyStockActionPerformed(java.awt.event.ActionEvent evt) {
        BuyStocks buyStocks  = new BuyStocks(this, true, loggedInUserGlobal);
        buyStocks.setVisible(true);
    }

    private void sellStockActionPerformed(java.awt.event.ActionEvent evt) {
        SellStocks sellStocks  = new SellStocks(this, true, loggedInUserGlobal);
        sellStocks.setVisible(true);
    }

    private void securitiesAccountActionPerformed(java.awt.event.ActionEvent evt) {
        SecuritiesAccount securitiesAccount = new SecuritiesAccount(this, true, loggedInUserGlobal);
        securitiesAccount.setVisible(true);
    }

    private void loadStocksActionPerformed(java.awt.event.ActionEvent evt) {
        Manager manager = new Manager();
        manager.updateStocks();
        JOptionPane.showMessageDialog(null, "Stocks fetched");
    }
                                                 

    private void openPositionsActionPerformed(java.awt.event.ActionEvent evt) {                                              
        ViewOpenPostions openPositions = new ViewOpenPostions(this, true, loggedInUserGlobal);
        openPositions.setVisible(true);    
    }                                             

    private void viewClosedPositionsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        ViewClosedPostions closedPositions = new ViewClosedPostions(this, true, loggedInUserGlobal);
        closedPositions.setVisible(true);
    }                                                   

    private void viewStockTransactionsActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        ViewStockTransactions stockTransactions = new ViewStockTransactions(this, true, loggedInUserGlobal);
        stockTransactions.setVisible(true);    
    }                                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BankerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BankerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BankerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BankerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BankerHome dialog = new BankerHome(new javax.swing.JDialog(), true, loggedInUserGlobal);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton applyLoan;
    private javax.swing.JButton buyStock;
    private javax.swing.JButton changePassword;
    private javax.swing.JButton checkingsAccount;
    private javax.swing.JPanel content;
    private javax.swing.JTable customerDetails;
    private javax.swing.JButton deposit;
    private javax.swing.JLabel fundTransfer;
    private javax.swing.JButton getAllUsers;
    private javax.swing.JButton getUserByUserID;
    private javax.swing.JButton getUserByUserName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private javax.swing.JButton loadStocks;
    private javax.swing.JButton loanApplicationApproval;
    private javax.swing.JButton loanApplicationReceived;
    private javax.swing.JButton loanApplicationStatus;
    private javax.swing.JButton loanPaymentAccount;
    private javax.swing.JButton loanPaymentDeposit;
    private javax.swing.JButton loanPaymentDepositValue;
    private javax.swing.JButton logout;
    private javax.swing.JButton openPositions;
    private javax.swing.JButton payInterest;
    private javax.swing.JLabel personalDetailsLabel;
    private javax.swing.JButton poorCustomers;
    private javax.swing.JButton savingAccount;
    private javax.swing.JButton securitiesAccount;
    private javax.swing.JButton sellStock;
    private javax.swing.JButton showActiveCustomers;
    private javax.swing.JButton showActiveUsers;
    private javax.swing.JButton showCheckingsAccount;
    private javax.swing.JButton showInactiveCustomers;
    private javax.swing.JButton showInactiveUsers;
    private javax.swing.JButton showSavingsAccount;
    private javax.swing.JButton showTransactionHistory;
    private javax.swing.JLabel stockMarket;
    private javax.swing.JButton transferOneToOther;
    private javax.swing.JButton updateDetails;
    private javax.swing.JButton updateStocks;
    private javax.swing.JButton viewAccountDetails;
    private javax.swing.JButton viewClosedPositions;
    private javax.swing.JButton viewStockDetails;
    private javax.swing.JButton viewStockTransactions;
    private javax.swing.JButton viewTransactionDetails;
    private javax.swing.JButton withdraw;
    // End of variables declaration
    
    public void addData(){

        String[] columns = new String [] {
                "ID", "First Name", "Last Name", "Phone", "Address", "Email", "Username", "Password", "Active", "Employee", "Admin", "Customer", "Collateral", "Loan"
        };

        DefaultTableModel model = (DefaultTableModel)customerDetails.getModel();
        model.setColumnIdentifiers(columns);

        int ID = loggedInUserGlobal.getId();
        String firstName = loggedInUserGlobal.getFirstName();
        String lastName = loggedInUserGlobal.getLastName();
        String userName = loggedInUserGlobal.getUserName();
        String password = "********";
        String email = loggedInUserGlobal.getEmail();
        String mobile = loggedInUserGlobal.getPhone();
        int isActive = loggedInUserGlobal.getIsActive();
        int isEmployee = loggedInUserGlobal.getIsEmployee();
        int isAdmin = loggedInUserGlobal.getIsAdmin();

        int hasCollateral = loggedInUserGlobal.getHasCollateral();
        int hasLoan = loggedInUserGlobal.getHasLoan();
        int isCustomer = loggedInUserGlobal.getIsCustomer();

        String address = loggedInUserGlobal.getAddress();

        Vector<Object> vector = new Vector<>();
        vector.add(ID);
        vector.add(firstName);
        vector.add(lastName);
        vector.add(mobile);
        vector.add(address);
        vector.add(email);
        vector.add(userName);
        vector.add(password);
        vector.add(isActive);
        vector.add(isEmployee);
        vector.add(isAdmin);
        vector.add(isCustomer);
        vector.add(hasCollateral);
        vector.add(hasLoan);

        model.addRow(vector);
        System.out.println("Pranesh: "+ID);
    }
}
